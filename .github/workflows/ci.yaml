name: CI

on:
  push:

jobs:
  bump:
    if: "!startsWith(github.event.head_commit.message, 'bump:') && github.ref == 'refs/heads/main'"
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"
      - name: Checkout repository
        uses: actions/checkout@main
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0
      - name: Install dependencies
        run: pip install -U commitizen
      - name: Create bump and changelog
        uses: commitizen-tools/commitizen-action@master
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          branch: main
          changelog_increment_filename: body.md
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          body_path: "body.md"
          name: Release ${{ github.ref }}
          tag_name: ${{ env.REVISION }}

  deploy:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    outputs:
      wheel_file: ${{ steps.build.outputs.wheel_file }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@main
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"
      - name: Install dependencies for Python setup
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel
      - name: Build package
        id: build
        run: |
          python setup.py bdist_wheel
          echo "::set-output name=wheel_file::$(basename $(ls dist/*.whl | head -1))"
        shell: bash
#      - name: Publish to PYPI
#        env:
#          TWINE_USERNAME: ${{ secrets.ORFIUM_PRIVATE_PYPI_USERNAME }}
#          TWINE_PASSWORD: ${{ secrets.ORFIUM_PRIVATE_PYPI_PASSWORD }}
#          TWINE_REPOSITORY_URL: "https://pypicloud.herokuapp.com/simple/"
#        run: |
#          pip install twine
#          twine upload dist/${{ steps.build.outputs.wheel_file }}
